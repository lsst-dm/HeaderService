#!/usr/bin/env python3

import time
import argparse
import HeaderService.hutils as hutils
import HeaderService.hscalc as hscalc
import HeaderService.camera_coords as camera_coords
import random
import lsst.ts.salobj as salobj
import lsst.ts.utils as ts_utils
import asyncio

# Get the info from the camera_coords library for and ITL sensor
CCDGEOM = camera_coords.CCDInfo('ITL')
CCDGEOM.load_vendor_defaults()


def cmdline():

    # Make conf_parser that hold values from a config.ini file
    parser = argparse.ArgumentParser(description="Send telemetry to Header Client")

    # The command-line arguments

    parser.add_argument("--filterband", action="store", default='r',
                        help="The filter band name (i.e. r)")
    parser.add_argument("--filtername", action="store", default='U-001',
                        help="Name of the physical filter (i.e. U-001)")
    parser.add_argument("--filterslot", action="store", default=0,
                        help="Filter slot (1-indexed)")
    parser.add_argument("--filterpos", action="store", default=666.0,
                        help="The filter measured position of slide (i.e.: 666.0)")

    # Control imageName
    parser.add_argument("--camcode", action="store", default='CC',
                        help="The code for the telecope")
    parser.add_argument("--controller", action="store", default='O',
                        help="The controller (O for OCS, C for CCS)")
    parser.add_argument("--dayobs", action="store", default=None,
                        help="The observation day as defined by image name")
    parser.add_argument("--seqnum", action="store", default=1, type=int,
                        help="The sequence number from the image name")
    parser.add_argument("--NSequence", action="store", default=3, type=int,
                        help="Number of exposure in sequence")

    parser.add_argument("--exptime", action="store", default=15, type=float,
                        help="Exposure time in seconds")

    parser.add_argument("--object", action="store", default="ElGordo", type=str,
                        help="The name of the object observed.")
    parser.add_argument("--imagetag", action="store", default="TestTag", type=str,
                        help="The imagetag of the observation.")
    parser.add_argument("--imageName", action="store", default=None, type=str,
                        help="Optional imageName")
    parser.add_argument("--obsannot", action="store", default="Dummy Obs Annotation", type=str,
                        help="Optional Observation annnotation")
    parser.add_argument("--emuimage", action="store", default="IM_P_20250914_001378", type=str,
                        help="Optional Emulated Image Name")

    parser.add_argument("--additionalKeys", action="store",
                        default='imageType:groupId:testType:reason:program',
                        type=str, help="Optional additionalKeys")
    parser.add_argument("--additionalValues", action="store",
                        default='BIAS:CALSET_XXXX_YYYY:SIMTEST_ABCD:No-good-reason:my_program',
                        type=str, help="Optional additionalValues")
    parser.add_argument("--seeing", action="store", default=1.2, type=float,
                        help="The Seeing from the DIMM monitor (arcsec).")
    parser.add_argument("--seeing_expiresIn", action="store", default=300, type=float,
                        help="The Seeing expiration time in seconds")

    parser.add_argument("--sleeptime", action="store", default=1, type=float,
                        help="Sleep Time between step, in seconds")
    parser.add_argument("--delaytime", action="store", default=0, type=float,
                        help="Extra delay time before endOfImageTelemetry in seconds")
    parser.add_argument("--preh", action="store", default=CCDGEOM.preh, type=int,
                        help="prescan horizontal")
    parser.add_argument("--overh", action="store", default=CCDGEOM.overh, type=int,
                        help="overscal horizontal")
    parser.add_argument("--overv", action="store", default=CCDGEOM.overv, type=int,
                        help="overscal vertical")
    args = parser.parse_args()
    return args


def get_tai_time():
    """ Shortcut to get tai time now"""
    return ts_utils.tai_from_utc(time.time())


async def amain():

    # Get the command line arguments
    args = cmdline()

    shuttime = args.exptime + random.uniform(0, 0.5)

    # Create handlers for the CSCs we want to simulate messages
    cam = salobj.Controller(name="CCCamera", index=0)
    LOGGER = hutils.create_logger()

    # Camera Geometry
    # Send sub-set of imageReadoutParameters, we populate only a few fields
    ccdLocation = hutils.build_sensor_list('ComCam', sep='')
    ccdSlots = [s[3:] for s in ccdLocation]
    raftBays = [s[0:3] for s in ccdLocation]
    Nsensors = len(ccdLocation)

    # Camera confguration from focalPlaneSummaryInfo
    kwfPl = {'ccdLocation': ':'.join(ccdLocation),
             'ccdSlot': ':'.join(ccdSlots),
             'raftBay': ':'.join(raftBays),
             'rebSerialNumber': ':'.join(['REBSER_TEST', ]*Nsensors),
             'ccdManSerNum': ':'.join(['12345', ]*Nsensors),
             'ccdManufacturer': ':'.join(['ITL', ]*Nsensors),
             'ccdType': [1, ]*Nsensors,
             'ccdLSSTName': ':'.join(['ITL-YYYY-XXX', ]*Nsensors),
             # Made up values just for testing
             'sequencerChecksum': ':'.join(['1234567890', ]*Nsensors),
             'sequencerKey': ':'.join(['SEQNAME_TEST', ]*Nsensors),
             'rebLSSTName': ':'.join(['REBNAME_TEST', ]*Nsensors),
             'ccdTempSetPoint': [random.uniform(-30, 0) for i in range(Nsensors)]}
    await cam.evt_focalPlaneSummaryInfo.set_write(**kwfPl)
    LOGGER.info("Sending simulated focalPlaneSummaryInfo {}".format(kwfPl))

    kwRO = {'overRows': [args.overv]*Nsensors,
            'overCols': [args.overh]*Nsensors,
            'preCols': [args.preh]*Nsensors,
            'readCols': [CCDGEOM.dimh]*Nsensors,
            'readCols2': [0]*Nsensors,
            'readRows': [CCDGEOM.dimv]*Nsensors,
            'ccdLocation': ':'.join(ccdLocation),
            'ccdSlot': ':'.join(ccdSlots),
            'raftBay': ':'.join(raftBays),
            'daqAnnotation': args.obsannot,
            'force_output': True}
    await cam.evt_imageReadoutParameters.set_write(**kwRO)
    LOGGER.info("Sending simulated imageReadoutParameters {}".format(kwRO))

    # Set the filter names
    kwFilter = {'filterType': args.filterband,
                'filterName': args.filtername,
                'filterPosition': args.filterpos,
                'filterSlot': args.filterslot}
    await cam.evt_endSetFilter.set_write(**kwFilter)
    LOGGER.info("Sending simulated Camera endSetFilter:{}".format(kwFilter))

    # Loop over NSequence
    for k in range(args.NSequence):

        timeStamp = get_tai_time()
        seqN = args.seqnum + k
        LOGGER.info("----Starting Integration {}".format(seqN))

        # We need to emulate this format from camera:
        # AT_O_20190409_000008.header
        if args.dayobs:
            DAYOBS = args.dayobs
        else:
            DATE_OBS = hscalc.get_date(timeStamp)
            DAYOBS = DATE_OBS.datetime.strftime('%Y%m%d')

        if args.imageName:
            imageName = args.imageName
        else:
            imageName = "{}_{}_{}_{:06d}".format(args.camcode, args.controller, DAYOBS, seqN)

        # Send CCD temperature telemetry using a random generator
        kwCCD = {'location': ':'.join(ccdLocation),
                 'temp': [random.uniform(-30, 0)]*Nsensors
                 }
        LOGGER.info("Sending simulated fp_Ccd {}".format(kwCCD))
        await cam.tel_focal_plane_Ccd.set_write(**kwCCD)

        # Send the startIntegration for image: k
        LOGGER.info("Sending simulated startIntegration")
        kwInt = {'imagesInSequence': args.NSequence,
                 'imageName': imageName,
                 'imageIndex': k+1,
                 'imageNumber': seqN,
                 'imageSource': args.camcode,
                 'imageController': 'O',
                 'imageDate': DAYOBS,
                 'timestampAcquisitionStart': timeStamp,
                 'exposureTime': args.exptime,
                 'timeout': args.exptime,
                 'additionalKeys': args.additionalKeys,
                 'additionalValues': args.additionalValues,
                 'force_output': True}
        await cam.evt_startIntegration.set_write(**kwInt)
        LOGGER.info("Sending simulated startIntergration: {}".format(kwInt))
        LOGGER.info(f"Waiting for {args.exptime} sec")
        time.sleep(args.exptime)

        # Send startReadout Event after integration is finished
        LOGGER.info("Sending simulated startReadout")
        del kwInt['timeout']
        await cam.evt_startReadout.set_write(**kwInt)

        # Send endReadout Event after startReadout is finished
        kwRO = kwInt
        del kwRO['exposureTime']
        kwRO['requestedExposureTime'] = args.exptime
        LOGGER.info("Sending simulated endReadout")
        await cam.evt_endReadout.set_write(**kwInt)

        # send endOfImageTelemetry event
        kwEND = {'imagesInSequence': args.NSequence,
                 'imageName': imageName,
                 'imageIndex': k,
                 'imageNumber': seqN,
                 'imageSource': args.camcode,
                 'imageController': 'O',
                 'imageDate': DAYOBS,
                 'timestampAcquisitionStart': timeStamp,
                 'timestampDateObs': timeStamp,
                 'timestampDateEnd': get_tai_time(),
                 'exposureTime': args.exptime,
                 'darkTime': shuttime + args.sleeptime,
                 'imageTag': args.imagetag,
                 'measuredShutterOpenTime': shuttime,
                 'emulatedImage': args.emuimage,
                 'force_output': True}
        if args.delaytime > 0:
            LOGGER.info(f"Delaying endOfImageTelemetry {args.delaytime}[s]")
            time.sleep(args.delaytime)
        LOGGER.info("Sending simulated endOfImageTelemetry")
        await cam.evt_endOfImageTelemetry.set_write(**kwEND)
        LOGGER.info(f"---Sleeping for {args.sleeptime} s ---")
        time.sleep(args.sleeptime)


asyncio.run(amain())
