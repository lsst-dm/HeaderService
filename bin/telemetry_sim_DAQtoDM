#!/usr/bin/env python

import time
import argparse
from datetime import datetime
import HeaderService.SAL_tools as SAL_tools
import HeaderService.hutils as hutils
LOGGER = hutils.create_logger(name=__name__)


def cmdline():

    # Make conf_parser that hold values from a config.ini file
    parser = argparse.ArgumentParser(description="Send telemetry to Header Client")

    # The command-line arguments
    parser.add_argument("--ra", action="store",default=None, type=float, 
                        help="The RA of the visit")
    parser.add_argument("--dec", action="store",default=None, type=float,
                        help="The DEC of the visit")
    parser.add_argument("--band", action="store",default=None, 
                        help="Number of CCDs to build")
    parser.add_argument("--imageSequenceName", action="store",default='LSSTTEST',
                        help="ImageSequenceName")
    parser.add_argument("--NSequence", action="store",default=2, type=int, 
                        help="Number of exposure in sequence")
    parser.add_argument("--exptime", action="store",default=15, type=float, 
                        help="Exposure time in seconds")
    parser.add_argument("--sleeptime", action="store",default=1, type=float, 
                        help="Sleep Time between step, in seconds")
    args = parser.parse_args()
    return args

if __name__ == "__main__":

    # Get the args from the command-line
    args = cmdline()
    
    # Initialize the classes for each device
    # Note that we need a separate object for Commands if we want to wait
    tcs = SAL_tools.DDSSend("tcs")
    cam = SAL_tools.DDSSend("camera")
    #camCommand = SAL_tools.DDSSend("camera")
    camCommand = cam
    
    # Send target postion
    tcs.send_Telemetry("kernel_FK5Target",ra=args.ra,dec=args.dec)
    LOGGER.info("Sending kernel_FK5Targer: {}".format(tcs.get_myData()))
    time.sleep(args.sleeptime)

    # Send endSetFilter
    cam.send_Event("endSetFilter",filterName=args.band)
    LOGGER.info("Sending endSetFilter: {}".format(cam.get_myData()))
    time.sleep(args.sleeptime)

    # Send the takeImages command
    kw = {'numImages':args.NSequence,
          'expTime': args.exptime,
          'imageSequenceName': args.imageSequenceName,
          'timeout':10}
    camCommand.send_Command('takeImages',**kw)
    LOGGER.info("Sending takeImages {}".format(camCommand.get_myData()))
    #camCommand.start()
    
    LOGGER.info("---Starting Image loop---")
    # Loop over nsequence
    for k in range(args.NSequence):

        seqN = k+1
        LOGGER.info("----Starting Integration {}".format(seqN))

        # Send startIntegration k
        LOGGER.info("Sending starIntegration")
        kw = {'imageSequenceName':args.imageSequenceName,
              'imageName':'{}_{:02d}'.format(args.imageSequenceName,seqN),
              'imageIndex':seqN,
              'timeStamp':time.time(),
              'exposureTime':args.exptime,
              'priority':1}
        cam.send_Event("startIntegration",**kw)
        LOGGER.info("Sending startIntergration: {}".format(kw))        
        time.sleep(args.exptime)

        # Send startReadout Event after integration is finished
        LOGGER.info("Sending startReadout")
        cam.send_Event('startReadout')
        time.sleep(args.sleeptime)

        # Send endReadout event 
        LOGGER.info("Sending endReadout")
        cam.send_Event('endReadout',**kw)
        time.sleep(0.1)

        LOGGER.info("Sending endOfImageTelemetry")
        cam.send_Event('endOfImageTelemetry',**kw)
        time.sleep(args.sleeptime)

    # Send the ACK
    cam.ackCommand('takeImages',camCommand.cmdId)
    camCommand.waitForCompletion_Command()
    LOGGER.info("Bye...")

