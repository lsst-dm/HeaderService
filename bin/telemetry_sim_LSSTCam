#!/usr/bin/env python3

import time
import argparse
import HeaderService.hutils as hutils
import HeaderService.hscalc as hscalc
import HeaderService.camera_coords as camera_coords
import random
import lsst.ts.salobj as salobj
import lsst.ts.utils as ts_utils
import asyncio

# Get the info from the camera_coords library for and ITL sensor
CCDGEOM = camera_coords.CCDInfo('ITL')
CCDGEOM.load_vendor_defaults()


def cmdline():

    # Make conf_parser that hold values from a config.ini file
    parser = argparse.ArgumentParser(description="Send telemetry to Header Client")

    # The command-line arguments
    parser.add_argument("--ra", action="store", default=None, type=float,
                        help="The RA of the visit")
    parser.add_argument("--dec", action="store", default=None, type=float,
                        help="The DEC of the visit")
    parser.add_argument("--rotpa", action="store", default=0.0, type=float,
                        help="The ROTPA for the visit")

    parser.add_argument("--filterband", action="store", default='r',
                        help="The filter band name (i.e. r)")
    parser.add_argument("--filtername", action="store", default='U-001',
                        help="Name of the physical filter (i.e. U-001)")
    parser.add_argument("--filterslot", action="store", default=0,
                        help="Filter slot (1-indexed)")
    parser.add_argument("--filterpos", action="store", default=666.0,
                        help="The filter measured position of slide (i.e.: 666.0)")

    # Control imageName
    parser.add_argument("--camcode", action="store", default='MT',
                        help="The code for the telecope")
    parser.add_argument("--controller", action="store", default='O',
                        help="The controller (O for OCS, C for CCS)")
    parser.add_argument("--dayobs", action="store", default=None,
                        help="The observation day as defined by image name")
    parser.add_argument("--seqnum", action="store", default=1, type=int,
                        help="The sequence number from the image name")
    parser.add_argument("--NSequence", action="store", default=3, type=int,
                        help="Number of exposure in sequence")

    parser.add_argument("--exptime", action="store", default=15, type=float,
                        help="Exposure time in seconds")
    parser.add_argument("--airmass", action="store", default=1.237, type=float,
                        help="Airmass")
    parser.add_argument("--ha", action="store", default='30.0', type=float,
                        help="The HA")
    parser.add_argument("--el", action="store", default=75.0, type=float,
                        help="The elevation angle")
    parser.add_argument("--az", action="store", default=45.0, type=float,
                        help="The azimuth angle")
    parser.add_argument("--focusz", action="store", default=13, type=float,
                        help="Hexapod FocusZ position (mm)")
    parser.add_argument("--vignetted", action="store", default=1, type=int,
                        help="Is the telescope vignetted 0:UNKNOWN, 1: NO, 2: PARTTIALLY, 3: FULLY")
    parser.add_argument("--instport", action="store", default=1, type=int,
                        help="The instrument port where LATISS is installed")
    parser.add_argument("--m3port", action="store", default=1, type=int,
                        help="Port the M3 is directing light into")
    parser.add_argument("--tracksys", action="store", default=1, type=int,
                        help="The tracking coordinate system [RADEC(1), AZEL(2), PLANET(3), EPHEM(4)].")
    parser.add_argument("--radesys", action="store", default=2, type=int,
                        help="The ra/dec track system value [FK5(1) or ICRS(2)].")
    parser.add_argument("--object", action="store", default="ElGordo", type=str,
                        help="The name of the object observed.")
    parser.add_argument("--imagetag", action="store", default="TestTag", type=str,
                        help="The imagetag of the observation.")
    parser.add_argument("--imageName", action="store", default=None, type=str,
                        help="Optional imageName")
    parser.add_argument("--obsannot", action="store", default="Dummy Obs Annotation", type=str,
                        help="Optional Observation annnotation")
    parser.add_argument("--emuimage", action="store", default="IM_P_20250914_001378", type=str,
                        help="Optional Emulated Image Name")

    parser.add_argument("--additionalKeys", action="store",
                        default='imageType:groupId:testType:reason:program',
                        type=str, help="Optional additionalKeys")
    parser.add_argument("--additionalValues", action="store",
                        default='BIAS:CALSET_XXXX_YYYY:SIMTEST_ABCD:No-good-reason:my_program',
                        type=str, help="Optional additionalValues")
    parser.add_argument("--seeing", action="store", default=1.2, type=float,
                        help="The Seeing from the DIMM monitor (arcsec).")
    parser.add_argument("--seeing_expiresIn", action="store", default=300, type=float,
                        help="The Seeing expiration time in seconds")

    parser.add_argument("--ambient_temp", action="store", default=12.5, type=float,
                        help="The Ambient Temperature in degC.")
    parser.add_argument("--pressure", action="store", default=101325, type=float,
                        help="Atmospheric Pressure in Pascals.")
    parser.add_argument("--humidity", action="store", default=20.5, type=float,
                        help="Percentage of Relative Humidity.")
    parser.add_argument("--windSpeed", action="store", default=8.5, type=float,
                        help="Wind Speed in m/s.")
    parser.add_argument("--windDirection", action="store", default=90, type=float,
                        help="Wind Direction in degrees.")

    parser.add_argument("--sleeptime", action="store", default=1, type=float,
                        help="Sleep Time between step, in seconds")
    parser.add_argument("--delaytime", action="store", default=5, type=float,
                        help="Extra delay time before endOfImageTelemetry in seconds")
    parser.add_argument("--preh", action="store", default=CCDGEOM.preh, type=int,
                        help="prescan horizontal")
    parser.add_argument("--overh", action="store", default=CCDGEOM.overh, type=int,
                        help="overscal horizontal")
    parser.add_argument("--overv", action="store", default=CCDGEOM.overv, type=int,
                        help="overscal vertical")
    args = parser.parse_args()
    return args


def get_tai_time():
    """ Shortcut to get tai time now"""
    return ts_utils.tai_from_utc(time.time())


async def amain():

    LOGGER = hutils.create_logger()
    LOGGER.propagate = False

    # Get the command line arguments
    args = cmdline()
    shuttime = args.exptime + random.uniform(0, 0.5)

    # Create handlers for the CSCs we want to simulate messages
    cam = salobj.Controller(name="MTCamera", index=0)
    ptg = salobj.Controller(name="MTPtg", index=0)
    hexa = salobj.Controller(name="MTHexapod", index=1)
    hexa2 = salobj.Controller(name="MTHexapod", index=2)
    mount = salobj.Controller(name="MTMount", index=0)
    m1m3 = salobj.Controller(name="MTM1M3", index=0)
    m2 = salobj.Controller(name="MTM2", index=0)
    dome = salobj.Controller(name="MTDome", index=0)
    rotator = salobj.Controller(name="MTRotator", index=0)
    dometraj = salobj.Controller(name="MTDomeTrajectory", index=0)
    dimm = salobj.Controller(name="DIMM", index=1)
    ess = salobj.Controller(name="ESS", index=301)
    # Wait for them to start
    await asyncio.gather(
        cam.start_task,
        ptg.start_task,
        hexa.start_task,
        hexa2.start_task,
        mount.start_task,
        m1m3.start_task,
        m2.start_task,
        dome.start_task,
        rotator.start_task,
        dometraj.start_task,
        dimm.start_task,
        ess.start_task,
    )

    # Camera Geometry
    # Send sub-set of imageReadoutParameters, we populate only a few fields
    ccdLocation = hutils.build_sensor_list('LSSTCam', sep='')
    ccdSlots = [s[3:] for s in ccdLocation]
    raftBays = [s[0:3] for s in ccdLocation]
    Nsensors = len(ccdLocation) + 1

    # Camera confguration from focalPlaneSummaryInfo
    # Need to hardcore 212 for ccdType and ccdTempSetPoin
    kwfPl = {'ccdLocation': ':'.join(ccdLocation),
             'ccdSlot': ':'.join(ccdSlots),
             'raftBay': ':'.join(raftBays),
             'rebSerialNumber': ':'.join(['REBSER_TEST', ]*Nsensors),
             'ccdManSerNum': ':'.join(['12345', ]*Nsensors),
             'ccdManufacturer': ':'.join(['ITL', ]*Nsensors),
             'ccdType': [1, ]*212,
             'ccdLSSTName': ':'.join(['ITL-YYYY-XXX', ]*Nsensors),
             # Made up values just for testing
             'sequencerChecksum': ':'.join(['1234567890', ]*Nsensors),
             'sequencerKey': ':'.join(['SEQNAME_TEST', ]*Nsensors),
             'rebLSSTName': ':'.join(['REBNAME_TEST', ]*Nsensors),
             'ccdTempSetPoint': [random.uniform(-30, 0) for i in range(212)]}
    await cam.evt_focalPlaneSummaryInfo.set_write(**kwfPl)
    LOGGER.info("Sending simulated focalPlaneSummaryInfo {}".format(kwfPl))

    kwRO = {'overRows': [args.overv]*Nsensors,
            'overCols': [args.overh]*Nsensors,
            'preCols': [args.preh]*Nsensors,
            'readCols': [CCDGEOM.dimh]*Nsensors,
            'readCols2': [0]*Nsensors,
            'readRows': [CCDGEOM.dimv]*Nsensors,
            'ccdLocation': ':'.join(ccdLocation),
            'ccdSlot': ':'.join(ccdSlots),
            'raftBay': ':'.join(raftBays),
            'daqAnnotation': args.obsannot,
            'force_output': True}
    await cam.evt_imageReadoutParameters.set_write(**kwRO)
    LOGGER.info("Sending simulated imageReadoutParameters {}".format(kwRO))

    # FocusZ positionZ for Hexapod
    kwHexa = {'demand': [0.0, 0.1, 0.2, 0.3, 0.4, 0.5],
              'position': [0, 1, 2, 3, 4, 5],
              'error': [0.0, 0.01, 0.03, 0.03, 0.04, 0.05]
              }
    await hexa.tel_application.set_write(**kwHexa)
    LOGGER.info("Sending simulated Hexapod application {}".format(kwHexa))

    # Pointing information
    # Send the pointing event -- here we populate only a few fields
    kwTA = {'timestamp': get_tai_time(),
            'ra': args.ra,
            'declination': args.dec,
            'targetName': args.object,
            'targetType': args.tracksys,
            'frame': args.radesys,
            'force_output': True}
    await ptg.evt_currentTarget.set_write(**kwTA)
    LOGGER.info("Sending simulated Ptg currentTarget:{}".format(kwTA))

    # Set the filter names
    kwFilter = {'filterType': args.filterband,
                'filterName': args.filtername,
                'filterPosition': args.filterpos,
                'filterSlot': args.filterslot}
    await cam.evt_endSetFilter.set_write(**kwFilter)
    LOGGER.info("Sending simulated Camera endSetFilter:{}".format(kwFilter))

    # Seeing
    timestamp_now = time.time()
    expiresAt = timestamp_now + args.seeing_expiresIn
    kwSeeing = {'fwhm': args.seeing,
                'timestamp': timestamp_now,
                'expiresIn': args.seeing_expiresIn,
                'expiresAt': expiresAt,
                'force_output': True}
    await dimm.evt_dimmMeasurement.set_write(**kwSeeing)
    LOGGER.info("Sending simulated Dimm Information {}".format(kwSeeing))

    # Weather/Env Information
    # Temperature
    kwtemp = {'temperatureItem': [args.ambient_temp]*16}
    await ess.tel_temperature.set_write(**kwtemp)
    LOGGER.info("Sending simulated Temperature")

    # Pressure
    kwpress = {'pressureItem': [args.pressure]*8}
    await ess.tel_pressure.set_write(**kwpress)

    # Humidity
    kwhumid = {'relativeHumidityItem': args.humidity}
    await ess.tel_relativeHumidity.set_write(**kwhumid)

    # Wind Speed/Direcction
    kwairFlow = {'speed': args.windSpeed,
                 'direction': args.windDirection}
    await ess.tel_airFlow.set_write(**kwairFlow)
    LOGGER.info("Sending simulated Wind Speed and Direction")

    kwSim = {'mode': 1}
    await m2.evt_simulationMode.set_write(**kwSim)
    LOGGER.info("Sending simulationMode for MTM2 {}".format(kwSim))
    await m1m3.evt_simulationMode.set_write(**kwSim)
    LOGGER.info("Sending simulationMode for MTM1M3 {}".format(kwSim))
    await mount.evt_simulationMode.set_write(**kwSim)
    LOGGER.info("Sending simulationMode for MTMount {}".format(kwSim))
    await hexa.evt_simulationMode.set_write(**kwSim)
    LOGGER.info("Sending simulationMode for MTHexapod-1 {}".format(kwSim))
    await hexa2.evt_simulationMode.set_write(**kwSim)
    LOGGER.info("Sending simulationMode for MTHexapod-2 {}".format(kwSim))
    await dome.evt_simulationMode.set_write(**kwSim)
    LOGGER.info("Sending simulationMode for MTDome {}".format(kwSim))
    await rotator.evt_simulationMode.set_write(**kwSim)
    LOGGER.info("Sending simulationMode for MTRotator {}".format(kwSim))
    await dometraj.evt_simulationMode.set_write(**kwSim)
    LOGGER.info("Sending simulationMode for MTDomeTrajectory {}".format(kwSim))

    # Send VIGNETTE value for all params
    kwVignette = {'vignetted': args.vignetted,
                  'azimuth': args.vignetted,
                  'elevation': args.vignetted,
                  'shutter': args.vignetted}
    await dometraj.evt_telescopeVignetted.set_write(**kwVignette)
    LOGGER.info("Sending telescopeVignetted for MTDomeTrajectory {}".format(kwVignette))

    # Loop over NSequence
    for k in range(args.NSequence):

        timeStamp = get_tai_time()
        seqN = args.seqnum + k
        LOGGER.info("----Starting Integration {}".format(seqN))

        # We need to emulate this format from camera:
        # AT_O_20190409_000008.header
        if args.dayobs:
            DAYOBS = args.dayobs
        else:
            DATE_OBS = hscalc.get_date(timeStamp)
            DAYOBS = DATE_OBS.datetime.strftime('%Y%m%d')

        if args.imageName:
            imageName = args.imageName
        else:
            imageName = "{}_{}_{}_{:06d}".format(args.camcode, args.controller, DAYOBS, seqN)

        # Send CCD temperature telemetry using a random generator
        kwCCD = {'location': ':'.join(ccdLocation),
                 'temp': [random.uniform(-30, 0)]*Nsensors
                 }
        LOGGER.info("Sending simulated fp_Ccd {}".format(kwCCD))
        await cam.tel_focal_plane_Ccd.set_write(**kwCCD)

        # The START telemetry for Airmass using the MTPtg.currentTargetStatus
        kwTA = {'timestamp': get_tai_time(),
                'ha': args.ha,
                'airmass': args.airmass}
        await ptg.tel_currentTargetStatus.set_write(**kwTA)
        LOGGER.info("Sending simulated currentTargetStatus HA/AIRMASS Start")

        # The START telemetry for RA/DEC, EL/AZ from the MTPtg.mountPosition
        kwMP = {'ra': args.ra,
                'declination': args.dec,
                'skyAngle': args.rotpa,
                'elevationActualPosition': args.el,
                'azimuthActualPosition': args.az}
        await ptg.tel_mountPosition.set_write(**kwMP)
        LOGGER.info("Sending simulated mountPosition for RA/DEC EL/AZ Start")

        kwEL = {'actualPosition': args.el}
        await mount.tel_elevation.set_write(**kwEL)
        kwAZ = {'actualPosition': args.az}
        await mount.tel_azimuth.set_write(**kwAZ)
        LOGGER.info("Sending simulated mount positions for EL/AZ Start")

        # Send the startIntegration for image: k
        LOGGER.info("Sending simulated startIntegration")
        kwInt = {'imagesInSequence': args.NSequence,
                 'imageName': imageName,
                 'imageIndex': k+1,
                 'imageNumber': seqN,
                 'imageSource': args.camcode,
                 'imageController': 'O',
                 'imageDate': DAYOBS,
                 'timestampAcquisitionStart': timeStamp,
                 'exposureTime': args.exptime,
                 'timeout': args.exptime,
                 'additionalKeys': args.additionalKeys,
                 'additionalValues': args.additionalValues,
                 'force_output': True}
        await cam.evt_startIntegration.set_write(**kwInt)
        LOGGER.info("Sending simulated startIntergration: {}".format(kwInt))
        LOGGER.info(f"Waiting for {args.exptime} sec")
        time.sleep(args.exptime)

        # The END telemetry for RA/DEC, EL/AZ from the MTPtg.mountPosition
        kwMP = {'ra': args.ra*random.uniform(0.95, 1.05),
                'declination': args.dec*random.uniform(0.95, 1.05),
                'skyAngle': args.rotpa*random.uniform(0.95, 1.05),
                'elevationActualPosition': args.el*random.uniform(0.95, 1.05),
                'azimuthActualPosition': args.az*random.uniform(0.95, 1.05)}
        await ptg.tel_mountPosition.set_write(**kwMP)
        LOGGER.info("Sending simulated mountPosition for RA/DEC EL/AZ END")

        # The END telemetry for Airmass using the MTPtg.currentTargetStatus
        kwTA = {'timestamp': get_tai_time(),
                'ha': args.ha*random.uniform(0.95, 1.05),
                'airmass': args.airmass*random.uniform(0.95, 1.05)}
        await ptg.tel_currentTargetStatus.set_write(**kwTA)
        LOGGER.info("Sending simulated currentTargetStatus HA/AIRMASS END")

        kwEL = {'actualPosition': args.el*random.uniform(0.95, 1.05)}
        await mount.tel_elevation.set_write(**kwEL)
        kwAZ = {'actualPosition': args.az**random.uniform(0.95, 1.05)}
        await mount.tel_azimuth.set_write(**kwAZ)
        LOGGER.info("Sending simulated mount positions for EL/AZ END")

        # Send startReadout Event after integration is finished
        LOGGER.info("Sending simulated startReadout")
        del kwInt['timeout']
        await cam.evt_startReadout.set_write(**kwInt)

        # Send endReadout Event after startReadout is finished
        kwRO = kwInt
        del kwRO['exposureTime']
        kwRO['requestedExposureTime'] = args.exptime
        LOGGER.info("Sending simulated endReadout")
        await cam.evt_endReadout.set_write(**kwInt)

        # send endOfImageTelemetry event
        kwEND = {'imagesInSequence': args.NSequence,
                 'imageName': imageName,
                 'imageIndex': k,
                 'imageNumber': seqN,
                 'imageSource': args.camcode,
                 'imageController': 'O',
                 'imageDate': DAYOBS,
                 'timestampAcquisitionStart': timeStamp,
                 'timestampDateObs': timeStamp,
                 'timestampDateEnd': get_tai_time(),
                 'exposureTime': args.exptime,
                 'darkTime': shuttime + args.sleeptime,
                 'imageTag': args.imagetag,
                 'measuredShutterOpenTime': shuttime,
                 'emulatedImage': args.emuimage,
                 'force_output': True}
        if args.delaytime > 0:
            LOGGER.info(f"Delaying endOfImageTelemetry {args.delaytime}[s]")
            time.sleep(args.delaytime)
        LOGGER.info("Sending simulated endOfImageTelemetry")
        await cam.evt_endOfImageTelemetry.set_write(**kwEND)
        LOGGER.info(f"---Sleeping for {args.sleeptime} s ---")
        time.sleep(args.sleeptime)


asyncio.run(amain())
