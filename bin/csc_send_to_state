#!/usr/bin/env python3

import lsst.ts.salobj as salobj
import asyncio
import logging
# import time


def cmdline():

    import argparse
    parser = argparse.ArgumentParser(description="Send CSC to a given State")

    # The optional arguments
    parser.add_argument("csc_name", action="store", help="Name of CSC")
    parser.add_argument("state", action="store", help="Desired State for CSC")
    args = parser.parse_args()
    return args


async def main(args):
    async with salobj.Domain() as domain:
        remote = salobj.Remote(domain=domain, name=args.csc_name, index=0)
        remote.salinfo.log.addHandler(logging.StreamHandler())
        remote.salinfo.log.setLevel(logging.INFO)
        remote.salinfo.log.info(f"Waiting for {args.csc_name} to complete Start")
        await remote.start_task
        newstate = getattr(salobj.State, args.state)
        remote.salinfo.log.info(f"Sending {args.csc_name} to: {args.state}")
        await salobj.set_summary_state(remote=remote, state=newstate)
        remote.salinfo.log.info("Done")

if __name__ == "__main__":
    args = cmdline()
    asyncio.get_event_loop().run_until_complete(main(args))
