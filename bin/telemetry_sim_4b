#!/usr/bin/env python

import time
import argparse
from datetime import datetime
import HeaderService.SAL_tools_send as SAL_tools_send

def cmdline():

    DATE = (datetime.now()).isoformat()

    # Make conf_parser that hold values from a config.ini file
    parser = argparse.ArgumentParser(description="Send telemetry to Header Client")

    # The command-line arguments
    parser.add_argument("--ra", action="store",default=None, type=float, 
                        help="The RA of the visit")
    parser.add_argument("--dec", action="store",default=None, type=float,
                        help="The DEC of the visit")
    parser.add_argument("--band", action="store",default=None, 
                        help="Number of CCDs to build")
    parser.add_argument("--imageSequenceName", action="store",default='LSST',
                        help="ImageSequenceName")
    parser.add_argument("--NSequence", action="store",default=2, type=int, 
                        help="Number of exposure in sequence")
    args = parser.parse_args()
    return args

if __name__ == "__main__":

    args = cmdline()

    # Send targer postion
    SAL_tools_send.send_FK5Target(args.ra,args.dec,1)
    time.sleep(2)
    
    # Send endSetFilter
    SAL_tools_send.send_camera_logevent_endSetFilter(args.band)
    time.sleep(2)
    
    # Loop over nsequence
    for k in range(args.NSequence):
        # Send startIntegration k
        kw = {'imageSequenceName':args.imageSequenceName,
              'imageName':'{}_{}'.format(args.imageSequenceName,k),
              'imageIndex':str(k),
              'timeStamp':time.time(),
              'priority':1}
        SAL_tools_send.send_camera_logevent_startIntegration(**kw)
        time.sleep(15)
        # Send Readout end event after integration is finished
        SAL_tools_send.camera_logevent_endReadout()
        time.sleep(5)

    print "Bye..."
