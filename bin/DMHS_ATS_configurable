#!/usr/bin/env python

import time
import sys
import os
import logging
import HeaderService
import salpytools
import HeaderService.hutils as hutils
import HeaderService.hslib as hslib
import argparse
import socket
import math
import yaml
    
spinner = hutils.spinner

# Create a logger for all functions
LOGGER = hutils.create_logger(level=logging.NOTSET,name='HEADERSERVICE')

def cmdline():

    # 1. We make a proto-parse use to read in the default yaml
    # configuration file, Turn off help, so we print all options in response to -h
    conf_parser = argparse.ArgumentParser(add_help=False)
    conf_parser.add_argument("-c", "--config",help="HeaderService config file")
    args, remaining_argv = conf_parser.parse_known_args()
    conf_defaults = yaml.load(open(args.config))

    # 2. This is the main parser
    parser = argparse.ArgumentParser(description="HeaderService",
                                     # Inherit options from config_parser
                                     parents=[conf_parser])
    parser.add_argument("--vendor", action="store",default='E2V', 
                        help="CCD Vendor Name")
    parser.add_argument("--filepath", action="store",default=os.path.join(os.getcwd(),'DMHS_filerepo'),
                        help="Filepath where we write the headers")
    parser.add_argument("--url_format", action="store",default="http://{ip_address}:8000/{filename_HDR}",
                        help="The URL format to be used")
    parser.add_argument("--tsleep", action="store",default=0.1, type=float, 
                        help="Sleep Time for loop")
    parser.add_argument("--start_state", action="store",default='OFFLINE', 
                        help="Initial start State of device")
    parser.add_argument("--send_efd_message", action="store_true",default=False, 
                        help="Send and EDF message as well?")
    #args = parser.parse_args()
    # Set the defaults of argparse using the values in the yaml config file
    parser.set_defaults(**conf_defaults)
    args = parser.parse_args(args=remaining_argv)

    #print ("Will use:")
    #for k, v in vars(args).items():
    #    print ("   {}: {}".format(k, v))
    #    print ("-----------------------")
    return args


if __name__ == "__main__":

    # Get the args from the command-line
    args = cmdline()
    w = hslib.HSworker(**args.__dict__)
    w.run()
