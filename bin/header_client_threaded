#!/usr/bin/env python

import time
import sys
import itertools
import logging
import HeaderService
import HeaderService.SAL_tools_recv as SAL_tools_recv
spinner = itertools.cycle(['-', '/', '|', '\\'])

if __name__ == "__main__":

    # Load up the header template
    htempl = HeaderService.HDRTEMPL_SciCamera()
    LOGGER = htempl.logger
    
    FK5Target = SAL_tools_recv.DDSSubcriber("tcs","tcs_kernel_FK5Target", Stype="Telemetry")
    Filter    = SAL_tools_recv.DDSSubcriber("camera","camera_Filter",Stype="Telemetry")
    Readout   = SAL_tools_recv.DDSSubcriber("camera","camera_logevent_endReadout", Stype="Event")
        
    FK5Target.start()
    Filter.start()
    Readout.start()

    loop_n = 0
    while True:

        # Get the RA,DEC
        if FK5Target.newTelem and Filter.newTelem:
            LOGGER.info("New value for FK5 Target")
            myData = FK5Target.getCurrentTelemetry()
            ra,dec,visitID = myData.ra, myData.dec, int(myData.rv)
            LOGGER.info("Received: RA=%s, DEC=%s" % (ra,dec))
            LOGGER.info("Received: visitID=%s" % visitID)
            filter_name = Filter.get_filter_name()
            LOGGER.info("Received: Filter=%s" % filter_name)
            
            # Get the readout
            LOGGER.info("Waiting for Camera Readout event")
            Readout.join()
            if Readout.endEvent:
                sys.stdout.flush()
                LOGGER.info("Received: Readout Signal")
                # Manually Update a header param
                htempl.update_record('RA',ra)
                htempl.update_record('DEC',dec)
                htempl.update_record('FILTER',filter_name)
                htempl.update_record('BAND',filter_name)
                htempl.update_record('EXPNUM',visitID)
                # Write the header it out
                hout_file = "LSSTCam_%08d.header" % visitID
                htempl.write_header(hout_file, newline=True)
                LOGGER.info("Wrote header to: %s" % hout_file)
                LOGGER.info("------------------------------------------")
        else:
            sys.stdout.flush()
            sys.stdout.write("Wating for new Position/Filter... [%s]" % spinner.next())
            sys.stdout.write('\r') 
            

        time.sleep(0.5)
        loop_n +=1    
