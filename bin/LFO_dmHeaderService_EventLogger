#!/usr/bin/env python3

import time
import logging
import SALPY_atHeaderService
import HeaderService.hutils as hutils
import datetime

LOGGER = hutils.create_logger(level=logging.NOTSET, name='ATHEADERSERVICE')
logname = "ATHS_LFO{}.log".format(datetime.datetime.now().strftime("%Y-%m-%d-%H:%M"))

formatter = logging.Formatter("[%(asctime)s] [%(levelname)s] %(message)s")
fh = logging.FileHandler(rlogname)
fh.setFormatter(formatter)
LOGGER.addHandler(fh)

if __name__ == "__main__":
    mgr = SALPY_atHeaderService.SAL_atHeaderService()
    mgr.salEvent("ATHeaderService_logevent_largeFileObjectAvailable")
    LOGGER.info("ATHeaderService_largeFileObjectAvailable logger ready")
    event = SALPY_ATHeaderService.atHeaderService_logevent_largeFileObjectAvailableC()
    while True:
        retval = mgr.getEvent_largeFileObjectAvailable(event)
        if retval == 0:
            LOGGER.info("-------------------------------------------------------")
            LOGGER.info("Event ATHeaderService LargeFileObjectAvailable received")
            LOGGER.info("Byte_Size: %s" % event.byteSize)
            LOGGER.info("Checksum: %s" % event.checksum)
            LOGGER.info("Generator: %s" % event.generator)
            LOGGER.info("Mime: %s" % event.mimeType)
            LOGGER.info("URL: %s" % event.url)
            LOGGER.info("ID: %s" % event.id)
            LOGGER.info("Version: %s" % event.version)
            LOGGER.info("priority: %s" % event.priority)
            retval = -1
        time.sleep(1)
    mgr.salShutdown()
    exit()
