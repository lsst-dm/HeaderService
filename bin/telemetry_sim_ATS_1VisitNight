#!/usr/bin/env python

import time
import argparse
from datetime import datetime
import salpytools
import HeaderService.hutils as hutils
import HeaderService.camera_coords as camera_coords

LOGGER = hutils.create_logger(name=__name__)

# Get the info from the camera_coords library for and E2V sensor
_GEO = camera_coords.CCDGeom('E2V')

def cmdline():

    # Make conf_parser that hold values from a config.ini file
    parser = argparse.ArgumentParser(description="Send telemetry to Header Client")

    # The command-line arguments
    parser.add_argument("--ra", action="store",default=None, type=float, 
                        help="The RA of the visit")
    parser.add_argument("--dec", action="store",default=None, type=float,
                        help="The DEC of the visit")
    parser.add_argument("--angle", action="store",default=0.0, type=float,
                        help="The ANGLE")
    parser.add_argument("--filter", action="store",default='r', 
                        help="Name of the filter")
    parser.add_argument("--grating", action="store",default='R400', 
                        help="Name of the grating")
    parser.add_argument("--imageSequenceName", action="store",default='LSSTTEST',
                        help="ImageSequenceName")
    parser.add_argument("--NSequence", action="store",default=2, type=int, 
                        help="Number of exposure in sequence")
    parser.add_argument("--exptime", action="store",default=15, type=float, 
                        help="Exposure time in seconds")
    parser.add_argument("--airmass", action="store",default=1.237, type=float, 
                        help="Airmass")
    parser.add_argument("--sleeptime", action="store",default=1, type=float, 
                        help="Sleep Time between step, in seconds")
    parser.add_argument("--preh", action="store",default=_GEO.preh, type=int, 
                        help="prescan horizontal")
    parser.add_argument("--overh", action="store",default=_GEO.overh, type=int, 
                        help="overscal horizontal")
    parser.add_argument("--overv", action="store",default=_GEO.overv, type=int, 
                        help="overscal vertical")
    args = parser.parse_args()
    return args

if __name__ == "__main__":

    # Get the args from the command-line
    args = cmdline()
    
    # Initialize the classes for each device
    # Note that we need a separate object for Commands if we want to wait
    sch = salpytools.DDSSend("atScheduler")
    cam = salpytools.DDSSend("atcamera")
    #camCommand = salpytools.DDSSend("camera")
    camCommand = cam

    # Send sub-set of imageReadoutParameters -- here we populate only a few fields
    kw = {'overRows':args.overv,
          'overCols':args.overh,
          'preCols': args.preh,
          'readCols': _GEO.dimh,
          'readCols2': 0,
          'readRows': _GEO.dimv,
          }
    cam.send_Event('imageReadoutParameters',**kw)

    # Send the target event -- here we populate only a few fields
    kw = {#'targetId': 1,
          #'fieldId': 1,
          'filters': args.filter,
          'grating': args.grating,
          #'request_time': time.time(),
          #'request_mjd': time.time(),
          'ra': args.ra,
          'decl': args.dec,
          'angle': args.angle,
          'num_exposures': args.NSequence,
          #'exposure_times': args.exptime,
          'airmass': args.airmass,
          #'sky_brightness':1.0,
          #'cloud':0.0,
          #'seeing':1.0,
          #'slew_time':1.0,
          #'stage':1.0,
          #'offsetX':0.0,
          #'offsetY':0.0,
          'priority':1}
    sch.send_Event('target',**kw)
    LOGGER.info("Sending target {}".format(sch.get_myData()))
    #time.sleep(args.sleeptime)

    # Send the takeImages command
    kw = {'numImages':args.NSequence,
          'expTime': args.exptime,
          'imageSequenceName': args.imageSequenceName,
          'timeout':10}
    camCommand.send_Command('takeImages',**kw)
    LOGGER.info("Sending takeImages {}".format(camCommand.get_myData()))
    #camCommand.start()
    
    LOGGER.info("---Starting Image loop---")
    # Loop over nsequence
    for k in range(args.NSequence):

        seqN = k+1
        LOGGER.info("----Starting Integration {}".format(seqN))

        # Send startIntegration k
        LOGGER.info("Sending starIntegration")
        kw = {'imageSequenceName':args.imageSequenceName,
              'imageName':'{}_{:02d}'.format(args.imageSequenceName,seqN),
              'imageIndex':seqN,
              'timeStamp':time.time(),
              'exposureTime':args.exptime,
              'priority':1}
        cam.send_Event("startIntegration",**kw)
        LOGGER.info("Sending startIntergration: {}".format(kw))        
        time.sleep(args.exptime)

        # Send startReadout Event after integration is finished
        LOGGER.info("Sending startReadout")
        cam.send_Event('startReadout')
        time.sleep(args.sleeptime)

        # Send endReadout event 
        LOGGER.info("Sending endReadout")
        cam.send_Event('endReadout',**kw)
        time.sleep(0.1)

        # Send Measured exptime event 
        LOGGER.info("Sending Measured Exptime")
        cam.send_Event('shutterMotionProfile',measuredExposureTime=args.exptime+0.35)
        time.sleep(0.1)

        LOGGER.info("Sending endOfImageTelemetry")
        cam.send_Event('endOfImageTelemetry',**kw)
        time.sleep(args.sleeptime)

    # Send the ACK
    cam.ackCommand('takeImages',camCommand.cmdId)
    camCommand.waitForCompletion_Command()
    LOGGER.info("Bye...")

