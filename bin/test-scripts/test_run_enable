#!/usr/bin/env python

import time
import sys
import os
import logging
import HeaderService
import HeaderService.SAL_tools as SAL_tools
import HeaderService.SAL_tools_send as SAL_tools_send
import HeaderService.hutils as hutils

spinner = hutils.spinner

def run_enable(State,vendor='ITL',filepath='.'):
    
    # Load up the header template
    htempl= HeaderService.HDRTEMPL_TestCamera(vendor=vendor)
    LOGGER = htempl.logger
    
    Filter    = SAL_tools.DDSSubcriber("camera","camera_Filter",Stype="Telemetry")
    Readout   = SAL_tools.DDSSubcriber("camera","camera_logevent_endReadout", Stype="Event")
    FK5Target = SAL_tools.DDSSubcriber("tcs","tcs_kernel_FK5Target", Stype="Telemetry")
        
    FK5Target.start()
    Filter.start()
    Readout.start()

    # Make sure that we have a place to put the files
    if not os.path.exists(filepath):
        os.makedirs(filepath)
        LOGGER.info("Created dirname:{}".format(filepath))
            
    loop_n = 0
    while True:
        
        print 'FK5Target.newTelem',FK5Target.newTelem
        print 'Filter.newTelem',Filter.newTelem
        
        if FK5Target.newTelem and Filter.newTelem:

            LOGGER.info("New value for FK5 Target")
            myData = FK5Target.getCurrentTelemetry()
            ra,dec,visitID = myData.pmRA, myData.pmDec, int(myData.rv)
            LOGGER.info("Received: RA=%s, DEC=%s" % (ra,dec))
            LOGGER.info("Received: visitID=%s" % visitID)
            filter_name = Filter.get_filter_name()
            LOGGER.info("Received: Filter=%s" % filter_name)

            # Get the readout
            #LOGGER.info("Current State is {} -- waiting for Camera Readout event".format(State.current_state))

            Readout.waitEvent()
            if Readout.newEvent:
                sys.stdout.flush()
                LOGGER.info("Received: Readout Signal")
                # Manually Update a header param
                htempl.update_record('FILTER',filter_name, 'PRIMARY_HDU')
                htempl.update_record('IMAGETAG',visitID,'PRIMARY_HDU')
                # Write the header it out
                hout_file = os.path.join(filepath,"LSSTCam_%08d.header" % visitID)
                htempl.write_header(hout_file, newline=False)
                LOGGER.info("Wrote header to: %s" % hout_file)
                LOGGER.info("------------------------------------------")
                # Get the md5 for the header file
                md5value = hutils.md5Checksum(hout_file) #,blocksize=1024*512):
                bytesize = os.path.getsize(hout_file)
                LOGGER.info("Got MD5SUM: %s" % md5value)
                # Now we publish filename and MD5
                # Build the kwargs
                kw = {'Byte_Size':bytesize,
                      'Checksum':md5value,
                      'Generator':'DM_header_test',
                      'Mime':'text/plain',
                      'URL': hout_file,
                      'Version': 1,
                      'priority':1,
                      }
                SAL_tools_send.dmHeaderService_logevent_LargeFileObjectAvailable(**kw)
                Readout.newEvent = False
        else:
            #sys.stdout.flush()
            #sys.stdout.write("Current State is {} -- wating for new Position/Filter...[{}]".format(State.current_state,spinner.next()))
            #sys.stdout.write('\r')
            #print 'Current State is:',State.current_state
            print 'Wating for new Position/Filter'
            print 'FK5Target.newTelem',FK5Target.newTelem
            print 'Filter.newTelem',Filter.newTelem
            time.sleep(0.1)

        time.sleep(0.1)
        loop_n +=1    

if __name__ == "__main__":


    
    run_enable(1,vendor='ITL',filepath='HeaderTester')
    
