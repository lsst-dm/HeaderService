#!/usr/bin/env python

import time
import sys
import itertools
import logging
import HeaderService
import HeaderService.SAL_tools_recv as SAL_tools_recv
import HeaderService.hutils as hutils
import time
spinner = itertools.cycle(['-', '/', '|', '\\'])

LOGGER = hutils.create_logger(level=logging.NOTSET,name='HEADERSERVICE')

if __name__ == "__main__":

    # Load up the header template
    htempl= HeaderService.HDRTEMPL_TestCamera(vendor='ITL')

    LOGGER = htempl.logger
    
    FK5Target = SAL_tools_recv.DDSSubcriber("tcs","tcs_kernel_FK5Target", Stype="Telemetry")
    Filter    = SAL_tools_recv.DDSSubcriber("camera","camera_Filter",Stype="Telemetry")
    Readout   = SAL_tools_recv.DDSSubcriber("camera","camera_logevent_endReadout", tsleep=0.05, Stype="Event")
        
    FK5Target.start()
    Filter.start()
    Readout.start()

    MP = True
    #NP = multiprocessing.cpu_count()
    NP = 4
    NCCDS = 189

    while True:
        # Get the RA,DEC
        if FK5Target.newTelem and Filter.newTelem:
            LOGGER.info("New value for FK5 Target")
            myData = FK5Target.getCurrentTelemetry()
            ra,dec,visitID = myData.ra, myData.dec, int(myData.rv)
            LOGGER.info("Received: RA=%s, DEC=%s" % (ra,dec))
            LOGGER.info("Received: visitID=%s" % visitID)
            filter_name = Filter.get_filter_name()
            LOGGER.info("Received: Filter=%s" % filter_name)
            
            # Get the readout
            LOGGER.info("Waiting for Camera Readout event")
            Readout.join()
            if Readout.endEvent:
                sys.stdout.flush()
                LOGGER.info("Received: Readout Signal")
                htempl.update_record('FILTER',filter_name, 'PRIMARY_HDU')
                htempl.update_record('IMAGETAG',visitID,'PRIMARY_HDU')
                # Update header to a single string
                htempl.string_header()
                filenames = ["TestCam_%08d_%03d.header" % (visitID, k+1) for k in range(NCCDS)]
                t0 = time.time()
                # Write the header it out
                htempl.write_headers(filenames, MP=MP, NP=NP, md5=True)
                LOGGER.info("Header write time: %s" % hutils.elapsed_time(t0))
                LOGGER.info("------------------------------------------")

        else:
            sys.stdout.flush()
            sys.stdout.write("Wating for new Position/Filter... [%s]" % spinner.next())
            sys.stdout.write('\r') 
            

        time.sleep(0.1)
