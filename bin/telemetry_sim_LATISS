#!/usr/bin/env python3

import time
import argparse
import HeaderService.hutils as hutils
import HeaderService.hscalc as hscalc
import HeaderService.camera_coords as camera_coords
import random
import lsst.ts.salobj as salobj
import lsst.ts.utils as ts_utils
import asyncio

# Get the info from the camera_coords library for and E2V sensor
CCDGEOM = camera_coords.CCDInfo('E2V')
CCDGEOM.load_vendor_defaults()


def cmdline():

    # Make conf_parser that hold values from a config.ini file
    parser = argparse.ArgumentParser(description="Send telemetry to Header Client")

    # The command-line arguments
    parser.add_argument("--ra", action="store", default=None, type=float,
                        help="The RA of the visit")
    parser.add_argument("--dec", action="store", default=None, type=float,
                        help="The DEC of the visit")
    parser.add_argument("--rotpa", action="store", default=0.0, type=float,
                        help="The ROTPA for the visit")

    parser.add_argument("--filterband", action="store", default='r',
                        help="Name of the filter")
    parser.add_argument("--filtername", action="store", default='KPNO_1111_436nm',
                        help="Name of the physical filter (i.e. KPNO_1111_436nm)")
    parser.add_argument("--filterslot", action="store", default=0,
                        help="Filter slot (1-indexed)")
    parser.add_argument("--linpos", action="store", default=666.0,
                        help="The filter measured position of slide (i.e.: 666.0)")

    parser.add_argument("--gratingname", action="store", default='ronchi90lpmm',
                        help="Name of the physical grating")
    parser.add_argument("--gratingband", action="store", default='R100',
                        help="Name of the grating descriptive name")
    parser.add_argument("--gratingslot", action="store", default=1,
                        help="Grating's slot (1-indexed)")

    # Control imageName
    parser.add_argument("--camcode", action="store", default='AT',
                        help="The code for the telecope")
    parser.add_argument("--controller", action="store", default='O',
                        help="The controller (O for OCS, C for CCS)")
    parser.add_argument("--dayobs", action="store", default=None,
                        help="The observation day as defined by image name")
    parser.add_argument("--seqnum", action="store", default=1, type=int,
                        help="The sequence number from the image name")
    parser.add_argument("--NSequence", action="store", default=3, type=int,
                        help="Number of exposure in sequence")

    parser.add_argument("--exptime", action="store", default=15, type=float,
                        help="Exposure time in seconds")
    parser.add_argument("--airmass", action="store", default=1.237, type=float,
                        help="Airmass")
    parser.add_argument("--ha", action="store", default=30.0, type=float,
                        help="The HA")
    parser.add_argument("--el", action="store", default=75.0, type=float,
                        help="The elevation angle")
    parser.add_argument("--az", action="store", default=45.0, type=float,
                        help="The azimuth angle")
    parser.add_argument("--focusz", action="store", default=13, type=float,
                        help="ATHexapod/ATAOS FocusZ position (mm)")

    parser.add_argument("--instport", action="store", default=1, type=int,
                        help="The instrument port where LATISS is installed")
    parser.add_argument("--m3port", action="store", default=1, type=int,
                        help="Port the M3 is directing light into")
    parser.add_argument("--tracksys", action="store", default="Local", type=str,
                        help="The tracking coordinate system [Local, Sidereal, or non-sidereal].")
    parser.add_argument("--radesys", action="store", default="ICRS", type=str,
                        help="The ra/dec track system value.")
    parser.add_argument("--object", action="store", default="ElGordo", type=str,
                        help="The name of the object observed.")
    parser.add_argument("--imagetag", action="store", default="TestTag", type=str,
                        help="The imagetag of the observation.")
    parser.add_argument("--imageName", action="store", default=None, type=str,
                        help="Optional imageName")
    parser.add_argument("--obsannot", action="store", default="Dummy Obs Annotation", type=str,
                        help="Optional Observation annnotation")
    parser.add_argument("--emuimage", action="store", default="Dummy EMUNAME", type=str,
                        help="Optional Emulated Image Name")
    parser.add_argument("--additionalKeys", action="store",
                        default='imageType:groupId:testType:reason:program',
                        type=str, help="Optional additionalKeys")
    parser.add_argument("--additionalValues", action="store",
                        default='BIAS:CALSET_XXXX_YYYY:SIMTEST_ABCD:No-good-reason:my_program',
                        type=str, help="Optional additionalValues")
    parser.add_argument("--seeing", action="store", default=1.2, type=float,
                        help="The Seeing from the DIMM monitor (arcsec).")
    parser.add_argument("--seeing_expiresIn", action="store", default=300, type=float,
                        help="The Seeing expiration time in seconds")

    parser.add_argument("--domeaz", action="store", default=45, type=float,
                        help="The Dome AZ position (deg).")
    parser.add_argument("--shutterlow", action="store", default=0, type=float,
                        help="Dome Dropout Door Opening Percertage.")
    parser.add_argument("--shutterupp", action="store", default=100, type=float,
                        help="Dome Main Door Opening Percentage.")

    parser.add_argument("--ambient_temp", action="store", default=12.5, type=float,
                        help="The Ambient Temperature in degC.")
    parser.add_argument("--pressure", action="store", default=101325, type=float,
                        help="Atmospheric Pressure in Pascals.")
    parser.add_argument("--humidity", action="store", default=20.5, type=float,
                        help="Percentage of Relative Humidity.")
    parser.add_argument("--windSpeed", action="store", default=8.5, type=float,
                        help="Wind Speed in m/s.")
    parser.add_argument("--windDirection", action="store", default=90, type=float,
                        help="Wind Direction in degrees.")

    parser.add_argument("--sleeptime", action="store", default=1, type=float,
                        help="Sleep Time between step, in seconds")
    parser.add_argument("--delaytime", action="store", default=0, type=float,
                        help="Extra delay time before endOfImageTelemetry in seconds")
    parser.add_argument("--preh", action="store", default=CCDGEOM.preh, type=int,
                        help="prescan horizontal")
    parser.add_argument("--overh", action="store", default=CCDGEOM.overh, type=int,
                        help="overscal horizontal")
    parser.add_argument("--overv", action="store", default=CCDGEOM.overv, type=int,
                        help="overscal vertical")
    args = parser.parse_args()
    return args


def get_tai_time():
    """ Shortcut to get tai time now"""
    return ts_utils.tai_from_utc(time.time())


async def amain():

    # Get the command line arguments
    args = cmdline()

    # Create handlers for the CSCs we want to simulate messages
    cam = salobj.Controller(name="ATCamera", index=0)
    ptg = salobj.Controller(name="ATPtg", index=0)
    mcs = salobj.Controller(name="ATMCS", index=0)
    spec = salobj.Controller(name="ATSpectrograph", index=0)
    ataos = salobj.Controller(name="ATAOS", index=0)
    dome = salobj.Controller(name="ATDome", index=0)
    dimm = salobj.Controller(name="DIMM", index=1)
    ess = salobj.Controller(name="ESS", index=301)
    hexa = salobj.Controller(name="ATHexapod", index=0)
    pneumatics = salobj.Controller(name="ATPneumatics", index=0)

    LOGGER = hutils.create_logger()

    # Camera Geometry
    # Send sub-set of imageReadoutParameters, we populate only a few fields
    ccdLocation = hutils.build_sensor_list('LATISS', sep='')
    ccdSlots = [s[3:] for s in ccdLocation]
    raftBays = [s[0:3] for s in ccdLocation]
    Nsensors = len(ccdLocation)

    # Camera confguration from focalPlaneSummaryInfo
    kwfPl = {'ccdLocation': ':'.join(ccdLocation),
             'ccdSlot': ':'.join(ccdSlots),
             'raftBay': ':'.join(raftBays),
             'rebSerialNumber': ':'.join(['REBSER_TEST', ]*Nsensors),
             'ccdManSerNum': ':'.join(['12345', ]*Nsensors),
             'ccdManufacturer': ':'.join(['ITL', ]*Nsensors),
             'ccdType': 0,
             'ccdLSSTName': ':'.join(['ITL-YYYY-XXX', ]*Nsensors),
             # Made up values just for testing
             'sequencerChecksum': ':'.join(['1234567890', ]*Nsensors),
             'sequencerKey': ':'.join(['SEQNAME_TEST', ]*Nsensors),
             'rebLSSTName': ':'.join(['REBNAME_TEST', ]*Nsensors),
             'ccdTempSetPoint': random.uniform(-30, 0),
             }
    await cam.evt_focalPlaneSummaryInfo.set_write(**kwfPl)
    LOGGER.info("Sending simulated focalPlaneSummaryInfo {}".format(kwfPl))

    # Camera Geometry
    # Send sub-set of imageReadoutParameters, we populate only a few fields
    kwRO = {'overRows': args.overv,
            'overCols': args.overh,
            'preCols': args.preh,
            'readCols': CCDGEOM.dimh,
            'readCols2': 0,
            'readRows': CCDGEOM.dimv,
            'daqAnnotation': args.obsannot,
            'ccdLocation': ':'.join(ccdLocation),
            'force_output': True}
    await cam.evt_imageReadoutParameters.set_write(**kwRO)
    LOGGER.info("Sending simulated imageReadoutParameters")

    # Pointing information
    # Send the pointing event -- here we populate only a few fields
    kwTA = {'timestamp': get_tai_time(),
            'ra': args.ra,
            'declination': args.dec,
            'rotPA': args.rotpa,
            'targetName': args.object,
            'force_output': True}
    await ptg.evt_currentTarget.set_write(**kwTA)
    LOGGER.info("Sending simulated Ptg currentTarget")

    # The settingsApplied for ATSpectrograph
    kwSA = {'instrumentPort': args.instport,
            'force_output': True}
    await spec.evt_settingsAppliedValues.set_write(**kwSA)
    LOGGER.info("Sending simulated ATSpectrograph settingsApplied")

    # Filter information for ATSpectrograph
    kwFT = {'name': args.filtername,
            'band': args.filterband,
            'slot': args.filterslot,
            'force_output': True}
    await spec.evt_reportedFilterPosition.set_write(**kwFT)
    LOGGER.info("Sending simulated reportedFilterPosition")

    # Disperser information for ATSpectrograph
    kwDP = {'name': args.gratingname,
            'band': args.gratingband,
            'slot': args.gratingslot,
            'force_output': True}
    await spec.evt_reportedDisperserPosition.set_write(**kwDP)
    LOGGER.info("Sending simulated reportedDisperserPosition")

    # Linear Stage position for ATSpectrograph
    kwLS = {'position': args.linpos,
            'force_output': True}
    await spec.evt_reportedLinearStagePosition.set_write(**kwLS)
    LOGGER.info("Sending simulated reportedLinearStagePosition")

    # FocusZ userApplied for ATAOS
    kwataos = {'userApplied': 10,  # made up
               'force_output': True}
    await ataos.evt_focusOffsetSummary.set_write(**kwataos)
    LOGGER.info("Sending simulated focusOffsetSummary")

    LOGGER.info("---Sleeping for 1 s ---")
    time.sleep(1)
    LOGGER.info("---Starting Image loop---")

    # The m3PortSelected from ATMCS
    kwM3 = {'selected': args.m3port,
            'force_output': True}
    await mcs.evt_m3PortSelected.set_write(**kwM3)
    LOGGER.info("Sending simulated m3PortSelected")

    # The target from ATMCS
    kwTarget = {'radesys': args.radesys,
                'tracksys': args.tracksys,
                'force_output': True}
    await mcs.evt_target.set_write(**kwTarget)
    LOGGER.info("Sending simulated ATMCS Target")

    # Seeing
    timestamp_now = time.time()
    expiresAt = timestamp_now + args.seeing_expiresIn
    kwSeeing = {'fwhm': args.seeing,
                'timestamp': timestamp_now,
                'expiresIn': args.seeing_expiresIn,
                'expiresAt': expiresAt,
                'force_output': True}
    await dimm.evt_dimmMeasurement.set_write(**kwSeeing)
    LOGGER.info("Sending simulated Dimm Information {}".format(kwSeeing))

    # Sending Dome information
    kwDome = {'azimuthPosition': args.domeaz,
              'dropoutDoorOpeningPercentage': args.shutterlow,
              'mainDoorOpeningPercentage': args.shutterupp}
    await dome.tel_position.set_write(**kwDome)
    LOGGER.info("Sending simulated Dome Information")

    # Weather/Env Information
    # Temperature
    kwtemp = {'temperature': [args.ambient_temp]*16}
    await ess.tel_temperature.set_write(**kwtemp)
    LOGGER.info("Sending simulated Temperature")

    # Pressure
    kwpress = {'pressure': [args.pressure]*8}
    await ess.tel_pressure.set_write(**kwpress)

    # Humidity
    kwhumid = {'relativeHumidity': args.humidity}
    await ess.tel_relativeHumidity.set_write(**kwhumid)

    # Wind Speed/Direcction
    kwairFlow = {'speed': args.windSpeed,
                 'direction': args.windDirection}
    await ess.tel_airFlow.set_write(**kwairFlow)
    LOGGER.info("Sending simulated Wind Speed and Direction")

    kwSim = {'mode': 1}
    await mcs.evt_simulationMode.set_write(**kwSim)
    LOGGER.info("Sending simulationMode for ATMCS {}".format(kwSim))
    await hexa.evt_simulationMode.set_write(**kwSim)
    LOGGER.info("Sending simulationMode for ATHexapod {}".format(kwSim))
    await pneumatics.evt_simulationMode.set_write(**kwSim)
    LOGGER.info("Sending simulationMode for ATPneumatics {}".format(kwSim))
    await dome.evt_simulationMode.set_write(**kwSim)
    LOGGER.info("Sending simulationMode for ATDome {}".format(kwSim))
    await spec.evt_simulationMode.set_write(**kwSim)
    LOGGER.info("Sending simulationMode for ATSpectrograph {}".format(kwSim))

    # Loop over NSequence
    for k in range(args.NSequence):

        timeStamp = get_tai_time()
        seqN = args.seqnum + k
        LOGGER.info("----Starting Integration {}".format(seqN))

        # We need to emulate this format from camera:
        # AT_O_20190409_000008.header
        if args.dayobs:
            DAYOBS = args.dayobs
        else:
            DATE_OBS = hscalc.get_date(timeStamp)
            DAYOBS = DATE_OBS.datetime.strftime('%Y%m%d')
        imageName = "{}_{}_{}_{:06d}".format(args.camcode, args.controller, DAYOBS, seqN)

        # Send CCD temperature telemetry using a random generator
        kwCCD = {'location': ':'.join(ccdLocation),
                 'temp': [random.uniform(-100, -90)]*Nsensors
                 }
        LOGGER.info("Sending simulated fp_Ccd {}".format(kwCCD))
        await cam.tel_focal_plane_Ccd.set_write(**kwCCD)

        # Send CCD temperature Setpoint telemetry using a random generator
        kwCCD = {'tempCCDSetPoint': random.uniform(-100, -90),
                 'tempCCD': random.uniform(-100, -90)}
        await cam.tel_vacuum.set_write(**kwCCD)
        LOGGER.info("Sending simulated vacuum")

        # The START telemetry for Airmass using ATPtg.currentTargetStatus
        kwTA = {'timestamp': get_tai_time(),
                'ha': args.ha,
                'airmass': args.airmass}
        await ptg.tel_currentTargetStatus.set_write(**kwTA)
        LOGGER.info("Sending simulated currentTargetStatus HA/AIRMASS Start")

        # The START telemetry for RA/DEC, EL/AZ from the ATPtg.mountPositions
        kwMP = {'ra': [args.ra]*100,
                'declination': [args.dec]*100,
                'skyAngle': [args.rotpa]*100,
                'elevationCalculatedAngle': [args.el]*100,
                'azimuthCalculatedAngle': [args.az]*100}
        await ptg.tel_mountPositions.set_write(**kwMP)
        LOGGER.info("Sending simulated mountPositions for RA/DEC EL/AZ Start")

        # Send the startIntegration for image: k
        LOGGER.info("Sending simulated startIntegration")
        kwInt = {'imagesInSequence': args.NSequence,
                 'imageName': imageName,
                 'imageIndex': k+1,
                 'imageNumber': seqN,
                 'imageSource': args.camcode,
                 'imageController': 'O',
                 'imageDate': DAYOBS,
                 'timestampAcquisitionStart': timeStamp,
                 'exposureTime': args.exptime,
                 'timeout': args.exptime,
                 'additionalKeys': args.additionalKeys,
                 'additionalValues': args.additionalValues,
                 'force_output': True}

        await cam.evt_startIntegration.set_write(**kwInt)
        LOGGER.info("Sending simulated startIntergration: {}".format(kwInt))
        LOGGER.info(f"Waiting for {args.exptime} sec")
        time.sleep(args.exptime)

        # Send startReadout Event after integration is finished
        LOGGER.info("Sending simulated startReadout")
        del kwInt['timeout']
        await cam.evt_startReadout.set_write(**kwInt)

        # Send Measured exptime event
        LOGGER.info("Sending simulated Measured Exptime")
        shuttime = args.exptime + random.uniform(0, 0.5)
        await cam.evt_shutterMotionProfile.set_write(measuredExposureTime=shuttime)

        # The END telemetry for Airmass using ATPtg.currentTargetStatus
        kwTA = {'timestamp': get_tai_time(),
                'ha': args.ha*1.01,
                'airmass': args.airmass*1.01}
        await ptg.tel_currentTargetStatus.set_write(**kwTA)
        LOGGER.info("Sending simulated currentTargetStatus HA/AIRMASS End")

        # The END telemetry for RA/DEC EL/AZ from the ATPtg.mountPositions
        kwMP = {'ra': [args.ra*random.uniform(1, 1.01)]*100,
                'declination': [args.dec*random.uniform(1, 1.01)]*100,
                'skyAngle': [args.rotpa*random.uniform(1, 1.01)]*100,
                'elevationCalculatedAngle': [args.el*1.01]*100,
                'azimuthCalculatedAngle': [args.az*1.01]*100}
        await ptg.tel_mountPositions.set_write(**kwMP)
        LOGGER.info("Sending simulated mountPositions for RA/DEC EL/AZ End")

        # Send endReadout event
        LOGGER.info("Sending simulated endReadout")
        kwRO = kwInt
        del kwRO['exposureTime']
        kwRO['requestedExposureTime'] = args.exptime
        LOGGER.info("Sending simulated endReadout")
        await cam.evt_endReadout.set_write(**kwInt)

        # send endOfImageTelemetry event
        kwEND = {'imagesInSequence': args.NSequence,
                 'imageName': imageName,
                 'imageIndex': k,
                 'imageNumber': seqN,
                 'imageSource': args.camcode,
                 'imageController': 'O',
                 'imageDate': DAYOBS,
                 'timestampAcquisitionStart': timeStamp,
                 'timestampDateObs': timeStamp,
                 'timestampDateEnd': get_tai_time(),
                 'exposureTime': args.exptime,
                 'darkTime': shuttime + args.sleeptime,
                 'imageTag': args.imagetag,
                 'measuredShutterOpenTime': shuttime,
                 'emulatedImage': args.emuimage,
                 'force_output': True}
        if args.delaytime > 0:
            LOGGER.info(f"Delaying endOfImageTelemetry {args.delaytime}[s]")
            time.sleep(args.delaytime)
        LOGGER.info("Sending simulated endOfImageTelemetry")
        await cam.evt_endOfImageTelemetry.set_write(**kwEND)
        LOGGER.info(f"---Sleeping for {args.sleeptime} s ---")
        time.sleep(args.sleeptime)

asyncio.run(amain())
